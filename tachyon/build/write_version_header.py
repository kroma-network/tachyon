#!/usr/bin/env python3
"""Takes a commit sha and version and writes it in as readable text to a .h file."""

import argparse
import os
import sys


def write_output(major, minor, patch, prerelease, lastchange, project):  # pylint: disable=too-many-arguments
    output = [
        '// Generated by //tachyon/build/version.py',
        '#ifndef {project}_VERSION_GENERATED_H_',
        '#define {project}_VERSION_GENERATED_H_\n',
        '#define {project}_VERSION_MAJOR {major}',
        '#define {project}_VERSION_MINOR {minor}',
        '#define {project}_VERSION_PATCH {patch}',
    ]

    if prerelease is not None:
        output.extend(['#define {project}_PRERELEASE {prerelease}'])

    if lastchange is not None:
        output.extend(['#define {project}_LASTCHANGE {lastchange}'])

    # pylint: disable=line-too-long
    output.extend([
        '\n#define _{project}_VERSION_STRINGIFY(version) _{project}_VERSION_STRINGIFY2(version)',
        '#define _{project}_VERSION_STRINGIFY2(version) #version\n',
        '#define {project}_VERSION {project}_VERSION_MAJOR * 10000 + {project}_VERSION_MINOR * 100 + {project}_VERSION_PATCH',
        '#define {project}_VERSION_STR _{project}_VERSION_STRINGIFY({project}_VERSION_MAJOR.{project}_VERSION_MINOR.{project}_VERSION_PATCH)',
    ])

    full_str = '#define {project}_VERSION_FULL_STR _{project}_VERSION_STRINGIFY({project}_VERSION_MAJOR.{project}_VERSION_MINOR.{project}_VERSION_PATCH'
    if prerelease is not None and lastchange is not None:
        full_str += '-{project}_PRERELEASE'
    if lastchange is not None:
        full_str += '+{project}_LASTCHANGE'
    full_str += ')'
    output.append(full_str)

    output.extend(['\n#endif // {project}_VERSION_GENERATED_H_'])
    return '\n'.join(output).format(major=major,
                                    minor=minor,
                                    patch=patch,
                                    prerelease=prerelease,
                                    lastchange=lastchange,
                                    project=project)


def main():
    argument_parser = argparse.ArgumentParser()
    argument_parser.add_argument('output_file', help='The file to write to')
    argument_parser.add_argument('project')
    argument_parser.add_argument('major')
    argument_parser.add_argument('minor')
    argument_parser.add_argument('patch')
    argument_parser.add_argument('--prerelease')
    argument_parser.add_argument('--lastchange')
    args = argument_parser.parse_args()

    lastchange = None
    if args.lastchange is not None:
        with open(args.lastchange) as file:
            lastchange = file.read()[len('LASTCHANGE='):].rstrip()

    output = write_output(args.major, args.minor, args.patch, args.prerelease,
                          lastchange, args.project)
    current_contents = ''
    if os.path.isfile(args.output_file):
        with open(args.output_file, 'r') as current_file:
            current_contents = current_file.read()

    if current_contents != output:
        with open(args.output_file, 'w') as output_file:
            output_file.write(output)
    return 0


if __name__ == '__main__':
    sys.exit(main())
